import java.util.HashSet;
import java.util.Set;

public class ProblemMC extends Problem {

	boolean goal_test(Object state) {
        StateMC State_MC = (StateMC) state;

        for(int i=1; i<3; i++){
        	if(State_MC.riverBank[i] > 0)
        		return false;
        }

        return true;
	}

private boolean mc(int m, int c){
	if(m==1&&c!=1){
		return false;
	}
	if(m==2&&c!=2){
		return false;
	}

	return true;

}
    Set<Object> getSuccessors(Object state) {

        Set<Object> set = new HashSet<Object>();
        StateMC s = (StateMC) state;

				int boat = s.riverBank[0];
				int m = s.riverBank[1];
				int c = s.riverBank[2];

        StateMC ss; //successor state

			if(boat==1){
				ss = new StateMC(s);
				if(m>1){
					if(mc(m-2,c)){
						ss.riverBank[0]*=-1;
						ss.riverBank[1]-=2;
						set.add(ss);
					}
				}
				ss = new StateMC(s);
				if(m>0){
					if(mc(m-1,c)){
						ss.riverBank[0]*=-1;
						ss.riverBank[1]-=1;
						set.add(ss);
					}
				}
				ss = new StateMC(s);
				if(c>1){
					if(mc(m,c-2)){
						ss.riverBank[0]*=-1;
						ss.riverBank[2]-=2;
						set.add(ss);
					}
				}
				ss = new StateMC(s);
				if(c>0){
					if(mc(m,c-1)){
						ss.riverBank[0]*=-1;
						ss.riverBank[2]-=1;
						set.add(ss);
					}
				}
				ss = new StateMC(s);
				if(m>0&&c>0){
					if(mc(m-1,c-1)){
						ss.riverBank[0]*=-1;
						ss.riverBank[1]-=1;
						ss.riverBank[2]-=1;
						set.add(ss);
					}
				}
			}

			if(boat==-1){
				ss = new StateMC(s);
				if(m<2){
					if(mc(m+2,c)){
						ss.riverBank[0]*=-1;
						ss.riverBank[1]+=2;
						set.add(ss);
					}
				}
				ss = new StateMC(s);
				if(m<3){
					if(mc(m+1,c)){
						ss.riverBank[0]*=-1;
						ss.riverBank[1]+=1;
						set.add(ss);
					}
				}
				ss = new StateMC(s);
				if(c<2){
					if(mc(m,c+1)){
						ss.riverBank[0]*=-1;
						ss.riverBank[2]+=2;
						set.add(ss);
					}
				}
				ss = new StateMC(s);
				if(c<3){
					if(mc(m,c+2)){
						ss.riverBank[0]*=-1;
						ss.riverBank[2]+=1;
						set.add(ss);
					}
				}
				ss = new StateMC(s);
				if(c<3&&m<3){
					if(mc(m+1,c+1)){
						ss.riverBank[0]*=-1;
						ss.riverBank[1]+=1;
						ss.riverBank[2]+=1;
						set.add(ss);
					}
				}
			}

        return set;
    }

	double step_cost(Object fromState, Object toState) {

		return 1;

	}

	public double h(Object state) {
		StateMC s = (StateMC) state;

		return s.riverBank[1]+s.riverBank[2];
	}


	public static void main(String[] args) throws Exception {
		ProblemMC problem = new ProblemMC();
		Integer[] riverBank = {1,3,3};
		problem.initialState = new StateMC(riverBank);

		Search search  = new Search(problem);

		System.out.println("TreeSearch------------------------");
		System.out.println("BreadthFirstTreeSearch:\t\t" + search.BreadthFirstTreeSearch());
		System.out.println("UniformCostTreeSearch:\t\t" + search.UniformCostTreeSearch());
		System.out.println("DepthFirstTreeSearch:\t\t" + search.DepthFirstTreeSearch());
		System.out.println("GreedyBestFirstTreeSearch:\t" + search.GreedyBestFirstTreeSearch());
		System.out.println("AstarTreeSearch:\t\t" + search.AstarTreeSearch());

		System.out.println("\n\nGraphSearch----------------------");
		System.out.println("BreadthFirstGraphSearch:\t" + search.BreadthFirstGraphSearch());
		System.out.println("UniformCostGraphSearch:\t\t" + search.UniformCostGraphSearch());
		System.out.println("DepthFirstGraphSearch:\t\t" + search.DepthFirstGraphSearch());
		System.out.println("GreedyBestGraphSearch:\t\t" + search.GreedyBestFirstGraphSearch());
		System.out.println("AstarGraphSearch:\t\t" + search.AstarGraphSearch());

		System.out.println("\n\nIterativeDeepening----------------------");
		System.out.println("IterativeDeepeningTreeSearch:\t" + search.IterativeDeepeningTreeSearch());
		System.out.println("IterativeDeepeningGraphSearch:\t" + search.IterativeDeepeningGraphSearch());
	}

}
