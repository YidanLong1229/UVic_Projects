import java.util.HashSet;
import java.util.Set;
import java.lang.Math;

public class ProblemPancake extends Problem {

	boolean goal_test(Object state) {
        StatePancake State_Pancake = (StatePancake) state;

        for(int i=0; i<6; i++){
        	if(State_Pancake.stackP[i] != i)
        		return false;
        }

        return true;
	}

    Set<Object> getSuccessors(Object state) {

        Set<Object> set = new HashSet<Object>();
        StatePancake s = (StatePancake) state;
				int p0 = s.stackP[0];
				int p1 = s.stackP[1];
				int p2 = s.stackP[2];
				int p3 = s.stackP[3];
				int p4 = s.stackP[4];
				int p5 = s.stackP[5];

        StatePancake ss; //successor state

				ss = new StatePancake(s);
				ss.stackP[0]=p1;
				ss.stackP[1]=p0;
				set.add(ss);
				ss = new StatePancake(s);
				ss.stackP[0]=p2;
				ss.stackP[2]=p0;
				set.add(ss);
				ss = new StatePancake(s);
				ss.stackP[0]=p3;
				ss.stackP[1]=p2;
				ss.stackP[3]=p0;
				ss.stackP[2]=p1;
				set.add(ss);
				ss = new StatePancake(s);
				ss.stackP[0]=p4;
				ss.stackP[1]=p3;
				ss.stackP[4]=p0;
				ss.stackP[3]=p1;
				set.add(ss);
				ss = new StatePancake(s);
				ss.stackP[0]=p5;
				ss.stackP[1]=p4;
				ss.stackP[5]=p0;
				ss.stackP[4]=p1;
				ss.stackP[2]=p3;
				ss.stackP[3]=p2;
				set.add(ss);

        return set;
    }

	double step_cost(Object fromState, Object toState) {

		return 1;

	}

	public double h(Object state) {
		StatePancake s = (StatePancake) state;
		int d=0;
		for(int i=0;i<5;i++){
			if(Math.abs(s.stackP[i]-s.stackP[i+1])>1){
				d++;
			}
		}
		return d;
	}


	public static void main(String[] args) throws Exception {
		ProblemPancake problem = new ProblemPancake();
		Integer[] stackP = {1,0,3,5,2,4};
		problem.initialState = new StatePancake(stackP);

		Search search  = new Search(problem);

		System.out.println("TreeSearch------------------------");
		System.out.println("BreadthFirstTreeSearch:\t\t" + search.BreadthFirstTreeSearch());
		System.out.println("UniformCostTreeSearch:\t\t" + search.UniformCostTreeSearch());
		System.out.println("DepthFirstTreeSearch:\t\t" + search.DepthFirstTreeSearch());
		System.out.println("GreedyBestFirstTreeSearch:\t" + search.GreedyBestFirstTreeSearch());
		System.out.println("AstarTreeSearch:\t\t" + search.AstarTreeSearch());

		System.out.println("\n\nGraphSearch----------------------");
		System.out.println("BreadthFirstGraphSearch:\t" + search.BreadthFirstGraphSearch());
		System.out.println("UniformCostGraphSearch:\t\t" + search.UniformCostGraphSearch());
		System.out.println("DepthFirstGraphSearch:\t\t" + search.DepthFirstGraphSearch());
		System.out.println("GreedyBestGraphSearch:\t\t" + search.GreedyBestFirstGraphSearch());
		System.out.println("AstarGraphSearch:\t\t" + search.AstarGraphSearch());

		System.out.println("\n\nIterativeDeepening----------------------");
		System.out.println("IterativeDeepeningTreeSearch:\t" + search.IterativeDeepeningTreeSearch());
		System.out.println("IterativeDeepeningGraphSearch:\t" + search.IterativeDeepeningGraphSearch());
	}

}
