#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define TRUE 1
#define FALSE 0

#define DICTSIZE 4096                     /* allow 4096 entries in the dict  */
#define ENTRYSIZE 32



unsigned char dict[DICTSIZE][ENTRYSIZE];  /* of 30 chars max; the first byte */
                                          /* is string length; index 0xFFF   */
                                          /* will be reserved for padding    */
                                          /* the last byte (if necessary)    */

// These are provided below
int read12(FILE *infil);
int write12(FILE *outfil, int int12);
void strip_lzw_ext(char *fname);
void flush12(FILE *outfil);
void encode(FILE *in, FILE *out);
void decode(FILE *in, FILE *out);
int findIndict(unsigned char* arr);
void addchar(unsigned char* prev, unsigned char* prefix, unsigned char curr);
void initialdict();

int findIndict(unsigned char* arr){ //check whether the char is in the table
    int findindex = -1;
    		int i =0;
        for(;i<DICTSIZE-1;i++){
            //if the lenght is the same, then compare
            if( (dict[i][0]-'0') == (arr[0]-'0')){
                //compare each corresponding position
                int j=1;
                for(;j< (  (dict[i][0]-'0')+1);j++ ){
                    if(dict[i][j]==arr[j]){
                        findindex=i;
                    }
                    else{
                        //whenever one position in not consistent, not equal
                        findindex =-1;
                        break;
                    }
                }
                if(findindex!=-1){
                    //if find, retturn 
                    return findindex;
                }
                else{
                    //if not find, try the next one
                    continue;
                }
            }
            else{
                continue;
            }
        }

    return -1;
}

void initialdict(){ //initialize the dictionary
		int i;
    for(i=0;i<DICTSIZE;i++){
        dict[i][0] = 0+'0';
    }

    for(i=0;i<=255;i++){
        dict[i][0] = (unsigned char)(1+'0');
        dict[i][1] = (unsigned char)(i);
    }
}

int main(int argc, char *argv[]) {
    // TODO implement
    char *filename = NULL;
	char *mode = NULL;

	//no file name 
    if(argc==2 && strlen(argv[1])==1) {
		printf("No input file specified!\n");
		exit(1);
	}

	//implementation for requirement 2
    if(argc!=3){
    	printf("%s\n", "Invalid Usage, expected: LZW {input_file} [e | d]\n");
    	exit(4);
    }
    else{
    	filename = argv[1];
    	mode = argv[2];
    	if(*mode!='e' && *mode!='d'){
    	printf("%s\n", "Invalid Usage, expected: LZW {input_file} [e | d]\n");
    	exit(4);
    	}
    }

	FILE* filein = fopen(filename, "rb");
	if(filein ==NULL)
	{
		printf("Read error: file not found or cannot be read\n" );
		exit(2);
	}

	//construct the name of output file 
	char outputfile[strlen(filename)+10];
	strcpy(outputfile, filename);

	if(*mode =='e'){// if in encode mode
		strcat(outputfile,".LZW");
		// printf("encode file: %s\n", outputfile);
	}
	if(*mode =='d'){// if in decode mode
		strip_lzw_ext(outputfile);
		// printf("decode file: %s\n", outputfile);
	}

	//open the output file
	FILE* fileout = fopen(outputfile, "wb");

	//now based on the selection of mode, call encode or decode function
	if(*mode =='e'){
		encode(filein, fileout);
	}
	else{
		decode(filein, fileout);
	}
    return 0;
}

void addchar(unsigned char* prev, unsigned char* prefix, unsigned char curr){ //customize the table
    //obtain the length of prefix
    int length = prefix[0]-'0';
    //copy all chars in prefix to prefixpluscurr (prev here)
    int i=1;
    for(;i<length+1;i++){
        prev[i] = prefix[i];
    }
    //add the curr to the tail
    prev[i]=curr;

    if(i+1>ENTRYSIZE-2){
        printf("full single string\n");
        exit(0);
    }
    //update the length of the prefixpluscurr (prev here)
    prev[0] = (length+1)+'0';

}


/*****************************************************************************/
/* encode() performs the Lempel Ziv Welch compression from the algorithm in  */
/* the assignment specification. The strings in the dictionary have to be    */
/* handled carefully since 0 may be a valid character in a string (we can't  */
/* use the standard C string handling functions, since they will interpret   */
/* the 0 as the end of string marker). Again, writing the codes is handled   */
/* by a separate function, just so I don't have to worry about writing 12    */
/* bit numbers inside this algorithm.                                        */
void encode(FILE *in, FILE *out) {
    // TODO implement
    //first initilize the string table
    initialdict();
    unsigned char prefix[ENTRYSIZE];
    unsigned char prefixpluscurr[ENTRYSIZE];

    //set prefix to ''
    prefix[0] = 0+'0';
    //use a temporary to store prefix + curr 
    prefixpluscurr[0] = 0+'0';
    
    //currently read char
    unsigned char curr;
    int c;
    int index =-1;
    int length =-1;

    //the accessible entry starts from 256 (index)
    int counter = 256;
    int count =0;
	while( ( c =fgetc(in)) !=EOF ){
        //when the dict is full, re-initialize it
        if(counter>=4095){
            initialdict();
            counter=256;
        }
		curr = (unsigned char)c;
        count++;
        //concatenate the curr char to prefix, stored in  prefixpluscurr
		addchar(prefixpluscurr, prefix, curr);
		
		//search dict for the current string
		index = findIndict(prefixpluscurr);
		//index != -1 means find the string in the dict
		if(index!=-1){
            //find in the dict, set the prefix+char as the prefix for next turn
            length = prefixpluscurr[0]-'0';
            int m;
            for( m=0;m< (length+1);m++){
                prefix[m] = prefixpluscurr[m];
            }
		}
		else{
            //not find, write the code of the prefix to the out file
			write12(out, findIndict(prefix));
            //add the string as a new entry to the dictionary
            length = prefixpluscurr[0]-'0';
            int m;
            for( m=0;m< (length+1);m++){
                dict[counter][m] = prefixpluscurr[m];
            }
            //update the index for next new entry
			counter++;
			//set prefxi to curr
			prefix[0] = 1+'0';
			prefix[1] = curr;
		}
	}

    //find the code for prefix at last
	index = findIndict(prefix);
    //write to file
	write12(out, index);
    //flush
	flush12(out);
    //close file
    fclose(in);
    fclose(out);
    //successfully encode, exit
    exit(0);

}


/*****************************************************************************/
/* decode() performs the Lempel Ziv Welch decompression from the algorithm   */
/* in the assignment specification.                                          */
void decode(FILE *in, FILE *out) {
    // TODO implement
    //first initilize the string table
    initialdict();
    int code =-1;
    unsigned char str[ENTRYSIZE];
    unsigned char prefix[ENTRYSIZE];
    unsigned char prefixplushchar[ENTRYSIZE];//use a temporary to store prefix + curr 
    str[0]='0'+0;

    prefix[0]='0'+0;
    int length =-1;
    int l = -1;
    unsigned char cur= '\0';
    int index = -1;
    int counter =256;

    while((code=read12(in))>0){
        if(counter>=4095){
            initialdict();
            counter=256;
        }
    	length = dict[code][0]-'0';
        //copy the string at entry code to str
        int i;
    	for( i=0;i<length+1;i++){
    		str[i] = dict[code][i];
    	}
    	
    	for( i=1;i<length+1;i++){
            //fetch each char in the string
    		cur = str[i];
            //write it to the output file
    		putc(cur, out);
    		l = prefix[0]-'0';
			int j;
    		for( j=0;j<l+1;j++){
    			prefixplushchar[j] = prefix[j];
    		}
    		prefixplushchar[l+1] = cur;
    		prefixplushchar[0] = ((prefixplushchar[0]-'0')+1)+'0';

            //search the dictionary
    		index = findIndict(prefixplushchar);
    		if(index!=-1){
                //if find, update the prefix
                l = prefixplushchar[0]-'0';
            int i;
    			for( i=0;i<l+1;i++){
    				prefix[i] = prefixplushchar[i];
    			}
    		}
    		else{
                //if not find, add to the dictionary
                l = prefixplushchar[0]-'0';
            int i;
    			for( i=0;i<l+1;i++){
    				dict[counter][i] = prefixplushchar[i];
    			}
    			counter++;
    			prefix[0] = 1+'0';
				prefix[1] = cur;
    		}
    	}
    }
}


/*****************************************************************************/
/* read12() handles the complexities of reading 12 bit numbers from a file.  */
/* It is the simple counterpart of write12(). Like write12(), read12() uses  */
/* static variables. The function reads two 12 bit numbers at a time, but    */
/* only returns one of them. It stores the second in a static variable to be */
/* returned the next time read12() is called.                                */
int read12(FILE *infil)
{
 static int number1 = -1, number2 = -1;
 unsigned char hi8, lo4hi4, lo8;
 int retval;

 if(number2 != -1)                        /* there is a stored number from   */
    {                                     /* last call to read12() so just   */
     retval = number2;                    /* return the number without doing */
     number2 = -1;                        /* any reading                     */
    }
 else                                     /* if there is no number stored    */
    {
     if(fread(&hi8, 1, 1, infil) != 1)    /* read three bytes (2 12 bit nums)*/
        return(-1);
     if(fread(&lo4hi4, 1, 1, infil) != 1)
        return(-1);
     if(fread(&lo8, 1, 1, infil) != 1)
        return(-1);

     number1 = hi8 * 0x10;                /* move hi8 4 bits left            */
     number1 = number1 + (lo4hi4 / 0x10); /* add hi 4 bits of middle byte    */

     number2 = (lo4hi4 % 0x10) * 0x0100;  /* move lo 4 bits of middle byte   */
                                          /* 8 bits to the left              */
     number2 = number2 + lo8;             /* add lo byte                     */

     retval = number1;
    }

 return(retval);
}

/*****************************************************************************/
/* write12() handles the complexities of writing 12 bit numbers to file so I */
/* don't have to mess up the LZW algorithm. It uses "static" variables. In a */
/* C function, if a variable is declared static, it remembers its value from */
/* one call to the next. You could use global variables to do the same thing */
/* but it wouldn't be quite as clean. Here's how the function works: it has  */
/* two static integers: number1 and number2 which are set to -1 if they do   */
/* not contain a number waiting to be written. When the function is called   */
/* with an integer to write, if there are no numbers already waiting to be   */
/* written, it simply stores the number in number1 and returns. If there is  */
/* a number waiting to be written, the function writes out the number that   */
/* is waiting and the new number as two 12 bit numbers (3 bytes total).      */
int write12(FILE *outfil, int int12)
{
 static int number1 = -1, number2 = -1;
 unsigned char hi8, lo4hi4, lo8;
 unsigned long bignum;

 if(number1 == -1)                         /* no numbers waiting             */
    {
     number1 = int12;                      /* save the number for next time  */
     return(0);                            /* actually wrote 0 bytes         */
    }

 if(int12 == -1)                           /* flush the last number and put  */
    number2 = 0x0FFF;                      /* padding at end                 */
 else
    number2 = int12;

 bignum = number1 * 0x1000;                /* move number1 12 bits left      */
 bignum = bignum + number2;                /* put number2 in lower 12 bits   */

 hi8 = (unsigned char) (bignum / 0x10000);                     /* bits 16-23 */
 lo4hi4 = (unsigned char) ((bignum % 0x10000) / 0x0100);       /* bits  8-15 */
 lo8 = (unsigned char) (bignum % 0x0100);                      /* bits  0-7  */

 fwrite(&hi8, 1, 1, outfil);               /* write the bytes one at a time  */
 fwrite(&lo4hi4, 1, 1, outfil);
 fwrite(&lo8, 1, 1, outfil);

 number1 = -1;                             /* no bytes waiting any more      */
 number2 = -1;

 return(3);                                /* wrote 3 bytes                  */
}

/** Write out the remaining partial codes */
void flush12(FILE *outfil)
{
 write12(outfil, -1);                      /* -1 tells write12() to write    */
}                                          /* the number in waiting          */

/** Remove the ".LZW" extension from a filename */
void strip_lzw_ext(char *fname)
{
    char *end = fname + strlen(fname);

    while (end > fname && *end != '.' && *end != '\\' && *end != '/') {
        --end;
    }
    if ((end > fname && *end == '.') &&
        (*(end - 1) != '\\' && *(end - 1) != '/')) {
        *end = '\0';
    }
}








