import sklearn as sk
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import tree
from sklearn import linear_model
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from sklearn.feature_extraction import DictVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import graphviz
import numpy
import network as nw

def main(): #plots created using Random forest method

    dataset = np.loadtxt("cleaned_processed.cleveland.data", delimiter=",")

    X = dataset[:, :-1]
    y = dataset[:, -1]

    # split dataset into training set and test set
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    #heart disease dataset has 12 features
    num_features = 12
    num_estimators = []

    training_errors = []
    test_errors = []

    for item in np.arange(1,100,1):
        num_estimators.append(item)
    for item in num_estimators:

        # create classifiers
        classifier = RandomForestClassifier(n_estimators=item, random_state=0, max_features= num_features)
        classifier.fit(X_train, y_train)

        y_pred = classifier.predict(X_test)
        train_pred = classifier.predict(X_train)

        training_errors.append((1.0 - metrics.accuracy_score(y_train, train_pred)))
        test_errors.append(1.0 - metrics.accuracy_score(y_test, y_pred))

    # use matplotlib to get plot
    plt.plot(num_estimators, training_errors, 'r-', label="training error")
    plt.plot(num_estimators, test_errors, 'b-', label="test error")
    plt.legend(loc='upper right')
    plt.title("Random Forest Problem 1 Estimators")
    plt.xlabel("Estimators")
    plt.ylabel("Errors")
    plt.show()

if __name__ == "__main__":
    main()
