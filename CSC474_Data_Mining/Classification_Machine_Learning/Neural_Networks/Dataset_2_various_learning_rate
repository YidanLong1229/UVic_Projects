import sklearn as sk
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import tree
from sklearn import linear_model
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from sklearn.feature_extraction import DictVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import graphviz
import numpy
import network as nw
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler

def main():

    dataset = pd.read_csv("diabetes_dataset.csv")

    X = dataset.drop('Outcome', axis=1)
    y = dataset['Outcome']

    train_error = []
    test_error = []

    scaler = StandardScaler()
    X = scaler.fit_transform(X)

    trainData, testData, trainLabel, testLabel = train_test_split(X, y, test_size=0.2)

    learning_rate = []

    for item in np.arange(0.01,0.1,0.01):
        learning_rate.append(item)
    for item in learning_rate
        clf = MLPClassifier(hidden_layer_sizes=100, max_iter=2000, alpha=1e-2, solver='adam',learning_rate_init=item)
        clf.fit(trainData, trainLabel)
        train_error.append(1 - clf.score(trainData, trainLabel))
        test_error.append(1 - clf.score(testData, testLabel))

    plt.plot(learning_rate, train_error, 'r-', label="training error")
    plt.plot(learning_rate, test_error, 'b-', label="test error")
    plt.legend(loc='upper right')
    plt.title("Neural Networks Problem 2 Learning rate")
    plt.xlabel("Learning Rate")
    plt.ylabel("Errors")
    plt.show()

if __name__ == "__main__":
    main()
