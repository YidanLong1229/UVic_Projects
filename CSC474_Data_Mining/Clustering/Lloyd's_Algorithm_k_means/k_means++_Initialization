import numpy as np
import pandas as pd
import scipy
import math
import matplotlib.pyplot as plt
import random
from collections import defaultdict
from math import sqrt
from sklearn import metrics


def cluster(dataset, k):
    center = k_means_init(dataset, k)
    dataset_assignment = assign(dataset, center)

    i = 1
    while i > 0:
        center = get_center(dataset, dataset_assignment)

        original_assignments = dataset_assignment
        dataset_assignment = assign(dataset, center)

        num = 0
        l = zip(original_assignments, dataset_assignment)

        for a, b in l:
            if a != b:
                num = num + 1
        if num == 0:
            break
    clustering_cost = 0
    for item, items in enumerate(dataset):
        clustering_cost += get_e_distance(items, center[dataset_assignment[item]])
    return clustering_cost


def get_center(dataset, assignments): #m_step
    center = []
    m = defaultdict(list)
    l = zip(assignments, dataset)

    for i, j in l:
        m[i].append(j)
    for item in m.values():
        avrg = np.mean(item, axis=0)
        center.append(avrg)
    return center


def k_means_init(dataset, k):
    center = []
    ran = random.choice(dataset)
    center.append(ran)
    for item in range(1,k):
        dist = [min([get_e_distance(x, y) for y in center]) for x in dataset]
        result = sum(dist)
        dist = [z/result for z in dist]
        num = random.random()
        l = len(dist)
        result = 0
        for a in range(l):
            dist[a] += result
            result += dist[a]
        for b, c in enumerate(dist):
            if num < c:
                center.append(dataset[b])
                break
    return center


def get_e_distance(point1, point2):#get Euclidean distance
    dist = 0
    lp1 = len(point1)
    for item in range(lp1):
        dist += (point1[item] - point2[item]) ** 2
    sr = np.sqrt(dist)
    return sr


def assign(dataset, center): #e_step
    assignm = []
    l = len(center)
    for i in dataset:
        c = 0
        min_distance = float("inf")
        r = range(l)
        for j in r:
            tmp = get_e_distance(i, center[j])
            if (tmp < min_distance):
                min_distance = tmp
                c = j
        assignm.append(c)
    return assignm

def main():

    #read file

    dataset = pd.read_csv("dataset1.csv", header=None)
    #dataset = pd.read_csv("dataset2.csv", header=None)
    dataset = np.array(dataset)

    # k range
    ran = range(2, 8)

    kcost_results = []
    results = []

    for item in ran:
        print(item)
        k_min = math.inf
        k_costs = []
        for items in range(3):
            k_cost = cluster(dataset, item)
            if k_cost < k_min:
                k_min = k_cost
            else:
                break

        k_costs.append(k_min)
        minim = min(k_costs)
        kcost_results.append(minim)
        results.append(item)

    # plot
    plt.plot(results, kcost_results, color='r',label="k_means++ init")
    plt.legend(loc='upper right')
    #plt.title('Lloydâ€™s algorithm K-means++ Dataset1')
    plt.title('Lloydâ€™s algorithm K-means++ Dataset2')
    plt.xlabel('k values')
    plt.ylabel('Costs')
    plt.show()


if __name__ == "__main__":
    main()
